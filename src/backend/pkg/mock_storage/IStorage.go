// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thirteenths/WEB_BMSTU23/backend/pkg/storage (interfaces: IStorage)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/thirteenths/WEB_BMSTU23/backend/pkg/storage"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// QueryManager mocks base method.
func (m *MockIStorage) QueryManager() storage.DifQManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryManager")
	ret0, _ := ret[0].(storage.DifQManager)
	return ret0
}

// QueryManager indicates an expected call of QueryManager.
func (mr *MockIStorageMockRecorder) QueryManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryManager", reflect.TypeOf((*MockIStorage)(nil).QueryManager))
}

// Repositories mocks base method.
func (m *MockIStorage) Repositories() map[storage.TableName]storage.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repositories")
	ret0, _ := ret[0].(map[storage.TableName]storage.Repository)
	return ret0
}

// Repositories indicates an expected call of Repositories.
func (mr *MockIStorageMockRecorder) Repositories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repositories", reflect.TypeOf((*MockIStorage)(nil).Repositories))
}
