version: '3.8'
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  postgres_primary:
    <<: *postgres-common
    ports:
      - 5438:5432
    environment:
      POSTGRES_USER: user
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ../migration/00_init.sql:/docker-entrypoint-initdb.d/00_init.sql
      - ../migration/table.sql:/docker-entrypoint-initdb.d/table.sql
      #- ../migration/insert_data/insert_event.sql:/docker-entrypoint-initdb.d/insert_event.sql
      #- ../migration/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5439:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - postgres_primary

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
      PGADMIN_LISTEN_PORT: 81
    ports:
      - "5051:81"
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  backend:
    #container_name: backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - main_backend.env
    depends_on:
      - postgres_primary

  backend_get:
    #container_name: backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - get_backend.env
    deploy:
      replicas: 2
    depends_on:
      - postgres_primary

  backend_mirro:
    #container_name: backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    env_file:
      - mirro_backend.env
    depends_on:
      - postgres_replica

  nginx:
    container_name: nginx
    #image: nginx:alpine
    build:
      context: ../nginx
      dockerfile: ../nginx/Dockerfile
    restart: always
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/var/www/static:/var/www/static
      - ../nginx/var/lib/nginx/proxy_cache:/var/lib/nginx/proxy_cache
      - ../nginx/ssl:/etc/nginx/ssl
      - ../../img:/var/www/static/img
      - ../../img:/etc/nginx/img
    ports:
      - "8080:80"
      - "443:443"
    depends_on:
      - backend
      - backend_get
      - pgadmin
      - backend_mirro

volumes:
  #postgres-data:
  pgadmin-data:
